[
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html",
    "href": "content/01_journal/Chapter_1_Challenge.html",
    "title": "Challenge 1 - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Challenge 1 - Company Segmentation",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;%\n  select(\"symbol\", \"date\", \"adjusted\") %&gt;%\n  subset(date &gt;= \"2018-01-01\") %&gt;%\n  group_by(symbol) %&gt;%\n  mutate(adjustedYesterday = adjusted %&gt;% lag(order_by = date)) %&gt;%\n  drop_na(adjustedYesterday) %&gt;%\n  ungroup() %&gt;%\n  mutate(pct_return = (adjusted - adjustedYesterday) / adjustedYesterday) %&gt;%\n  select(\"symbol\", \"date\", \"pct_return\")\n\nsp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Challenge 1 - Company Segmentation",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0)%&gt;%\n  arrange(symbol) %&gt;%\n  ungroup()\n\nstock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Challenge 1 - Company Segmentation",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\nkmeans_obj %&gt;% glance()"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Challenge 1 - Company Segmentation",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;%\n  mutate(k_means = map(centers, kmeans_mapper)) %&gt;%\n  mutate(glance = map(k_means, glance))\n\nk_means_mapped_tbl \n\n\n\n  \n\n\n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %&gt;%\n  unnest(glance) %&gt;%\n  ggplot(aes(centers, tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  theme_minimal() +\n  labs(title = \"Scree Plot\")\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Challenge 1 - Company Segmentation",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;%\n  as_tibble(.name_repair = \"unique\") %&gt;%\n  set_names(c(\"x\", \"y\")) %&gt;%\n  bind_cols(stock_date_matrix_tbl %&gt;% select(symbol))\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\numap_results_tbl\n\n\n\n  \n\n\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;% \n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Challenge 1 - Company Segmentation",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;% \n  pull(k_means) %&gt;%\n  pluck(10)\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;%\n  augment(stock_date_matrix_tbl) %&gt;%\n  select(symbol, .cluster) %&gt;%\n  left_join(umap_results_tbl, by = 'symbol') %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = 'symbol')\n  \n\numap_kmeans_results_tbl \n\n\n\n  \n\n\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;%\n  ggplot(aes(x, y, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  theme_minimal()\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/Challenge_4.html",
    "href": "content/01_journal/Challenge_4.html",
    "title": "Challenge 4: Performance",
    "section": "",
    "text": "# Libraries\nlibrary(tidyverse)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(h2o)\n\n\n# Load data\nproduct_backorders_tbl &lt;- read_csv(\"Data/product_backorders.csv\")\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(product_backorders_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\n\n# Recipe\nfactor_names &lt;- c(\"deck_risk\", \"oe_constraint\", \"ppap_risk\", \"stop_auto_buy\", \"rev_stop\", \"went_on_backorder\")\n\nrecipe_obj &lt;- recipe(went_on_backorder ~ ., data = train_readable_tbl) %&gt;%\n    step_zv(all_predictors()) %&gt;%\n    step_mutate_at(all_of(factor_names), fn = as.factor) %&gt;%\n    step_center(all_numeric()) %&gt;%\n    step_scale(all_numeric()) %&gt;%\n    step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n    \n    # prepare the final recipe\n    prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n\n# Modeling\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         1 days 44 minutes \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 17 days \n#&gt;     H2O cluster name:           H2O_started_from_R_andi_gcu544 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   2.73 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21)\n\n# Split data into a training and a validation data frame\n# Setting the seed is just for reproducability\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   3%\n#&gt; 18:43:22.983: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |=====================                                                 |  31%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |=============================================                         |  65%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |============================================================          |  85%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\n# leaderboard\nh2o_leaderboard &lt;- automl_models_h2o@leaderboard\nh2o_leaderboard\n\n#&gt;                                                  model_id       auc   logloss\n#&gt; 1 StackedEnsemble_BestOfFamily_1_AutoML_5_20230614_184322 0.9491857 0.1750480\n#&gt; 2                      XGBoost_1_AutoML_5_20230614_184322 0.9459504 0.1815148\n#&gt; 3                          GBM_1_AutoML_5_20230614_184322 0.9438834 0.1846098\n#&gt; 4                      XGBoost_2_AutoML_5_20230614_184322 0.8974458 0.5009576\n#&gt; 5                          GLM_1_AutoML_5_20230614_184322 0.7761108 0.3241361\n#&gt; 6                          GBM_2_AutoML_5_20230614_184322 0.7379113 0.3523715\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7412366            0.1445822 0.2290206 0.05245044\n#&gt; 2 0.7363856            0.1523087 0.2307181 0.05323082\n#&gt; 3 0.7244995            0.1379415 0.2359512 0.05567296\n#&gt; 4 0.6186540            0.1821278 0.3951702 0.15615948\n#&gt; 5 0.3100852            0.2929375 0.3071824 0.09436101\n#&gt; 6 0.3588417            0.3658189 0.3195467 0.10211008\n#&gt; \n#&gt; [7 rows x 7 columns]\n\n\n\n# Leaderboard visualisation\nplot_h2o_leaderboard &lt;- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n\n    # Setup inputs\n    # adjust input so that all formats are working\n    order_by &lt;- tolower(order_by[[1]])\n\n    leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n        as.tibble() %&gt;%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n        rownames_to_column(var = \"rowname\") %&gt;%\n        mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as.factor())\n\n    # Transformation\n    if (order_by == \"auc\") {\n\n        data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n            slice(1:n_max) %&gt;%\n            mutate(\n                model_id   = as_factor(model_id) %&gt;% reorder(auc),\n                model_type = as.factor(model_type)\n            ) %&gt;%\n                pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else if (order_by == \"logloss\") {\n\n        data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n            slice(1:n_max) %&gt;%\n            mutate(\n                model_id   = as_factor(model_id) %&gt;% reorder(logloss) %&gt;% fct_rev(),\n                model_type = as.factor(model_type)\n            ) %&gt;%\n            pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else {\n        # If nothing is supplied\n        stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n    }\n\n    # Visualization\n    g &lt;- data_transformed_tbl %&gt;%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = size) +\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n             y = \"Model Postion, Model ID\", x = \"\")\n\n    if (include_lbl) g &lt;- g + geom_label(aes(label = round(value, 2), \n                                             hjust = \"inward\"))\n\n    return(g)\n\n}\n\nplot_h2o_leaderboard(h2o_leaderboard)\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n\n\n\n\n\n\n\n# Grid search\ndeeplearning_grid_01 &lt;- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(1, 5, 10)\n    )\n)\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         1 days 1 hours \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 17 days \n#&gt;     H2O cluster name:           H2O_started_from_R_andi_gcu544 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   2.70 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21)\n\n# precision vs recall with optimal threshold\nperformance_h2o &lt;- h2o.performance(automl_models_h2o@leader, newdata = as.h2o(test_tbl)) \n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nperformance_tbl &lt;- performance_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as.tibble() \n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\nperformance_tbl %&gt;%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_minimal()\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n# Roc plot\nperformance_tbl %&gt;%\n    ggplot(aes(fpr, tpr)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    theme_minimal() +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n\n\n\n\n\n\n\n\n# Precision vs Recall\nperformance_tbl %&gt;%\n    ggplot(aes(recall, precision)) +\n    geom_line(size = 1) +\n    theme_minimal() + \n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n\n\n\n\n\n\n\n\ngain_lift_tbl &lt;- performance_h2o %&gt;%\n    h2o.gainsLift() %&gt;%\n    as.tibble()\n\n# Gain Chart\n\ngain_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n    select(-contains(\"lift\")) %&gt;%\n    mutate(baseline = cumulative_data_fraction) %&gt;%\n    rename(gain     = cumulative_capture_rate) %&gt;%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %&gt;%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_minimal()\n\n\n\n\n\n\n\n\n# Lift Plot\n\nlift_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n    select(-contains(\"capture\")) %&gt;%\n    mutate(baseline = 1) %&gt;%\n    rename(lift = cumulative_lift) %&gt;%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %&gt;%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_minimal()\n\n\n\n\n\n\n\n\n# 5. Performance Visualization ----  \nlibrary(cowplot)\n\n#&gt; \n#&gt; Attache Paket: 'cowplot'\n\n\n#&gt; Das folgende Objekt ist maskiert 'package:lubridate':\n#&gt; \n#&gt;     stamp\n\nlibrary(glue)\n\n\n# set values to test the function while building it\nh2o_leaderboard &lt;- automl_models_h2o@leaderboard\nnewdata &lt;- test_tbl\norder_by &lt;- \"auc\"\nmax_models &lt;- 4\nsize &lt;- 1\n\nplot_h2o_performance &lt;- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n        as_tibble() %&gt;%\n        slice(1:max_models)\n    \n    newdata_tbl &lt;- newdata %&gt;%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      &lt;- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr &lt;- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics &lt;- function(model_id, test_tbl) {\n        \n        model_h2o &lt;- h2o.getModel(model_id)\n        perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %&gt;%\n            h2o.metric() %&gt;%\n            as.tibble() %&gt;%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %&gt;%\n        unnest(cols = metrics) %&gt;%\n        mutate(\n          model_id = as_factor(model_id) %&gt;% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %&gt;% \n                      round(3) %&gt;% \n                      as.character() %&gt;% \n                      as_factor() %&gt;% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %&gt;% \n                      round(4) %&gt;% \n                      as.character() %&gt;% \n                      as_factor() %&gt;% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 &lt;- model_metrics_tbl %&gt;%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_minimal() +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 &lt;- model_metrics_tbl %&gt;%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_minimal() +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift &lt;- function(model_id, test_tbl) {\n        \n        model_h2o &lt;- h2o.getModel(model_id)\n        perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %&gt;%\n            h2o.gainsLift() %&gt;%\n            as.tibble() %&gt;%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl &lt;- leaderboard_tbl %&gt;%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %&gt;%\n        unnest(cols = metrics) %&gt;%\n        mutate(\n            model_id = as_factor(model_id) %&gt;% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %&gt;% \n                round(3) %&gt;% \n                as.character() %&gt;% \n                as_factor() %&gt;% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %&gt;% \n                round(4) %&gt;% \n                as.character() %&gt;% \n                as_factor() %&gt;% \n                fct_reorder(as.numeric(model_id))\n        ) %&gt;%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 &lt;- gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_minimal() +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 &lt;- gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_minimal() +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend &lt;- get_legend(p1)\n    # Remove legend from p1\n    p1 &lt;- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p &lt;- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title &lt;- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle &lt;- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret &lt;- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n\nautoml_models_h2o@leaderboard %&gt;%\n    plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)"
  },
  {
    "objectID": "content/01_journal/Challenge_5.html",
    "href": "content/01_journal/Challenge_5.html",
    "title": "Challenge 5: Lime",
    "section": "",
    "text": "# Load Libraries \nlibrary(tidyverse)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(h2o)\nlibrary(lime)\n\n\n# Load Data\nemployee_attrition_tbl &lt;- read_csv(\"Data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndefinitions_raw_tbl    &lt;- read_excel(\"Data/data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\nprocess_hr_data_readable &lt;- function(data, definitions_tbl) {\n\n    definitions_list &lt;- definitions_tbl %&gt;%\n        fill(...1, .direction = \"down\") %&gt;%\n        filter(!is.na(...2)) %&gt;%\n        separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %&gt;%\n        rename(column_name = ...1) %&gt;%\n        mutate(key = as.numeric(key)) %&gt;%\n        mutate(value = value %&gt;% str_replace(pattern = \"'\", replacement = \"\")) %&gt;%\n        split(.$column_name) %&gt;%\n        map(~ select(., -column_name)) %&gt;%\n        map(~ mutate(., value = as_factor(value))) \n    \n    for (i in seq_along(definitions_list)) {\n        list_name &lt;- names(definitions_list)[i]\n        colnames(definitions_list[[i]]) &lt;- c(list_name, paste0(list_name, \"_value\"))\n    }\n    \n    data_merged_tbl &lt;- list(HR_Data = data) %&gt;%\n        append(definitions_list, after = 1) %&gt;%\n        reduce(left_join) %&gt;%\n        select(-one_of(names(definitions_list))) %&gt;%\n        set_names(str_replace_all(names(.), pattern = \"_value\", \n                                            replacement = \"\")) %&gt;%\n        select(sort(names(.))) %&gt;%\n        mutate_if(is.character, as.factor) %&gt;%\n        mutate(\n            BusinessTravel = BusinessTravel %&gt;% fct_relevel(\"Non-Travel\", \n                                                            \"Travel_Rarely\", \n                                                            \"Travel_Frequently\"),\n            MaritalStatus  = MaritalStatus %&gt;% fct_relevel(\"Single\", \n                                                           \"Married\", \n                                                           \"Divorced\")\n        )\n    \n    return(data_merged_tbl)\n    \n}\n\nemployee_attrition_readable_tbl &lt;- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n                step_zv(all_predictors()) %&gt;%\n                step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;% \n                prep()\n\nrecipe_obj\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n\n# 2. Models ----\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         1 days 17 hours \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 17 days \n#&gt;     H2O cluster name:           H2O_started_from_R_andi_gcu544 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   2.65 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21)\n\n# Split data into a training and a validation data frame\n# Setting the seed is just for reproducability\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny &lt;- \"Attrition\"\nx &lt;- setdiff(names(train_h2o), y)\n\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   3%\n#&gt; 11:20:13.273: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |=============================================                         |  65%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |============================================================          |  85%\n  |                                                                            \n  |=================================================================     |  92%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\nautoml_leader &lt;- automl_models_h2o@leader\n\n\npredictions_tbl &lt;- automl_leader %&gt;% \n    h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n    as.tibble() %&gt;%\n    bind_cols(\n        test_tbl %&gt;%\n            select(Attrition, EmployeeNumber)\n    )\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl\n\n\n\n  \n\n\n\n\n# 3.2 Single Explanation ----\n\nexplainer &lt;- train_tbl %&gt;%\n    select(-Attrition) %&gt;%\n    lime(\n        model           = automl_leader,\n        bin_continuous  = TRUE,\n        n_bins          = 4,\n        quantile_bins   = TRUE\n    )\n\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         1 days 17 hours \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 17 days \n#&gt;     H2O cluster name:           H2O_started_from_R_andi_gcu544 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   2.63 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21)\n\nexplanation &lt;- test_tbl %&gt;%\n    slice(1) %&gt;%\n    select(-Attrition) %&gt;%\n    lime::explain(\n    \n        # Pass our explainer object\n        explainer = explainer,\n        # Because it is a binary classification model: 1\n        n_labels   = 1,\n        # number of features to be returned\n        n_features = 8,\n        # number of localized linear models\n        n_permutations = 5000,\n        # Let's start with 1\n        kernel_width   = 1\n    )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ncase_1 &lt;- explanation %&gt;%\n    filter(case == 1)\n\ncase_1 %&gt;%\n    plot_features()\n\n\n\n\n\n\n\n\nmy_plot_features &lt;- function(data) {\n  g &lt;- data %&gt;% \n    ggplot(aes(x=feature_desc, y=feature_weight)) +\n    geom_col() +\n    coord_flip() +\n    theme_minimal() +\n    labs(y = \"Weight\", x = \"Feature\")\n  return(g)\n}\nmy_plot_features(case_1)\n\n\n\n\n\n\n\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         1 days 22 hours \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 18 days \n#&gt;     H2O cluster name:           H2O_started_from_R_andi_gcu544 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   2.59 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21)\n\nexplanation &lt;- test_tbl %&gt;%\n    slice(1:20) %&gt;%\n    select(-Attrition) %&gt;%\n    lime::explain(\n        explainer = explainer,\n        n_labels   = 1,\n        n_features = 8,\n        n_permutations = 5000,\n        kernel_width   = 0.5\n    )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmy_plot_explanation &lt;- function(data) {\n  g &lt;- data %&gt;% \n    ggplot(aes_(~case, ~feature_desc)) +\n    geom_tile(aes_(fill = ~feature_weight)) +\n    scale_x_discrete('Case', expand = c(0, 0)) +\n    scale_y_discrete('Feature', expand = c(0, 0)) +\n    scale_fill_gradient2('Feature\\nweight', low = 'firebrick', mid = '#f7f7f7', high = 'steelblue') +\n    theme_minimal()\n  if (is.null(explanation$label)) {\n    g\n  } else {\n    g + facet_wrap(~label)\n  }\n}\nmy_plot_explanation(explanation)\n\n#&gt; Warning: `aes_()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`"
  },
  {
    "objectID": "content/01_journal/Challenge_3.html",
    "href": "content/01_journal/Challenge_3.html",
    "title": "Challenge 3: AutoML",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(h2o)\n\n\n# Load data\nemployee_attrition_tbl &lt;- read_csv(\"Data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n    \n    color_expr &lt;- enquo(color)\n    \n    if (rlang::quo_is_null(color_expr)) {\n        \n        g &lt;- data %&gt;%\n            ggpairs(lower = \"blank\") \n        \n    } else {\n        \n        color_name &lt;- quo_name(color_expr)\n        \n        g &lt;- data %&gt;%\n            ggpairs(mapping = aes_string(color = color_name), \n                    lower = \"blank\", legend = 1,\n                    diag = list(continuous = wrap(\"densityDiag\", \n                                                  alpha = density_alpha))) +\n            theme(legend.position = \"bottom\")\n    }\n    \n    return(g)\n    \n}\n\n\n\n# Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n#&gt; Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`.\n#&gt; ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\n-&gt; 1c, 2d and 3b are correct\n\n# Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n-&gt; 4a and 5d are correct\n\n# Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n-&gt; 6d is correct\n\n# Work-Life Features \nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n-&gt; 7a is correct\n\n# Training and Education \nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n-&gt; 8c is correct\n\n# Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"years\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n9b and 10b are correct"
  },
  {
    "objectID": "content/01_journal/Challenge_3.html#libraries",
    "href": "content/01_journal/Challenge_3.html#libraries",
    "title": "Challenge 3: AutoML",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(h2o)\n\n\n# Load data\nemployee_attrition_tbl &lt;- read_csv(\"Data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "content/01_journal/Challenge_3.html#create-plot_ggpairs-function",
    "href": "content/01_journal/Challenge_3.html#create-plot_ggpairs-function",
    "title": "Challenge 3: AutoML",
    "section": "",
    "text": "plot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n    \n    color_expr &lt;- enquo(color)\n    \n    if (rlang::quo_is_null(color_expr)) {\n        \n        g &lt;- data %&gt;%\n            ggpairs(lower = \"blank\") \n        \n    } else {\n        \n        color_name &lt;- quo_name(color_expr)\n        \n        g &lt;- data %&gt;%\n            ggpairs(mapping = aes_string(color = color_name), \n                    lower = \"blank\", legend = 1,\n                    diag = list(continuous = wrap(\"densityDiag\", \n                                                  alpha = density_alpha))) +\n            theme(legend.position = \"bottom\")\n    }\n    \n    return(g)\n    \n}"
  },
  {
    "objectID": "content/01_journal/Challenge_3.html#plots-and-analysis",
    "href": "content/01_journal/Challenge_3.html#plots-and-analysis",
    "title": "Challenge 3: AutoML",
    "section": "",
    "text": "# Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n#&gt; Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`.\n#&gt; ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\n-&gt; 1c, 2d and 3b are correct\n\n# Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n-&gt; 4a and 5d are correct\n\n# Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n-&gt; 6d is correct\n\n# Work-Life Features \nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n-&gt; 7a is correct\n\n# Training and Education \nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n-&gt; 8c is correct\n\n# Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %&gt;%\n    select(Attrition, contains(\"years\")) %&gt;%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n9b and 10b are correct"
  },
  {
    "objectID": "content/01_journal/Challenge_6.html",
    "href": "content/01_journal/Challenge_6.html",
    "title": "Challenge 6: Deep Learning",
    "section": "",
    "text": "# Libraries\nlibrary(tidyverse)\nlibrary(lime)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(corrr)\nlibrary(tensorflow)\nlibrary(keras)\n\n\nchurn_data_raw &lt;- read_csv(\"Data/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\n\nglimpse(churn_data_raw)\n\n#&gt; Rows: 7,043\n#&gt; Columns: 21\n#&gt; $ customerID       &lt;chr&gt; \"7590-VHVEG\", \"5575-GNVDE\", \"3668-QPYBK\", \"7795-CFOCW…\n#&gt; $ gender           &lt;chr&gt; \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Female\",…\n#&gt; $ SeniorCitizen    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ Partner          &lt;chr&gt; \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n#&gt; $ Dependents       &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\"…\n#&gt; $ tenure           &lt;dbl&gt; 1, 34, 2, 45, 2, 8, 22, 10, 28, 62, 13, 16, 58, 49, 2…\n#&gt; $ PhoneService     &lt;chr&gt; \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n#&gt; $ MultipleLines    &lt;chr&gt; \"No phone service\", \"No\", \"No\", \"No phone service\", \"…\n#&gt; $ InternetService  &lt;chr&gt; \"DSL\", \"DSL\", \"DSL\", \"DSL\", \"Fiber optic\", \"Fiber opt…\n#&gt; $ OnlineSecurity   &lt;chr&gt; \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"…\n#&gt; $ OnlineBackup     &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"N…\n#&gt; $ DeviceProtection &lt;chr&gt; \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"Y…\n#&gt; $ TechSupport      &lt;chr&gt; \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n#&gt; $ StreamingTV      &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Ye…\n#&gt; $ StreamingMovies  &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"Yes…\n#&gt; $ Contract         &lt;chr&gt; \"Month-to-month\", \"One year\", \"Month-to-month\", \"One …\n#&gt; $ PaperlessBilling &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n#&gt; $ PaymentMethod    &lt;chr&gt; \"Electronic check\", \"Mailed check\", \"Mailed check\", \"…\n#&gt; $ MonthlyCharges   &lt;dbl&gt; 29.85, 56.95, 53.85, 42.30, 70.70, 99.65, 89.10, 29.7…\n#&gt; $ TotalCharges     &lt;dbl&gt; 29.85, 1889.50, 108.15, 1840.75, 151.65, 820.50, 1949…\n#&gt; $ Churn            &lt;chr&gt; \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Y…\n\n\n\nchurn_data_tbl &lt;- churn_data_raw %&gt;%\n                  select(-customerID) %&gt;%\n                  drop_na(TotalCharges) %&gt;%\n                  select(Churn, everything())\n\n\n# Split test/training sets\nset.seed(100)\ntrain_test_split &lt;- initial_split(churn_data_tbl, prop = 0.8)\ntrain_test_split\n\n#&gt; &lt;Training/Testing/Total&gt;\n#&gt; &lt;5625/1407/7032&gt;\n\n## &lt;Analysis/Assess/Total&gt;\n## &lt;5626/1406/7032&gt;\n\n# Retrieve train and test sets\ntrain_tbl &lt;- training(train_test_split)\ntest_tbl  &lt;- testing(train_test_split)\n\n\n# Create recipe\nrec_obj &lt;- recipe(Churn ~ ., data = train_tbl) %&gt;%\n    step_rm(Churn) %&gt;% \n    step_discretize(tenure, options = list(cuts = 6)) %&gt;%\n    step_log(TotalCharges) %&gt;%\n    step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %&gt;%\n    step_center(all_predictors(), -all_outcomes()) %&gt;%\n    step_scale(all_predictors(), -all_outcomes()) %&gt;%\n    prep(data = train_tbl)\n\n\n# Predictors\nx_train_tbl &lt;- bake( rec_obj , new_data = train_tbl )\nx_test_tbl  &lt;- bake( rec_obj , new_data = test_tbl )\n\n\n# Response variables for training and testing sets\ny_train_vec &lt;- ifelse( train_tbl$Churn == \"Yes\", 1, 0 )\ny_test_vec  &lt;- ifelse( test_tbl$Churn == \"Yes\", 1, 0 )\n\n\n# Building our Artificial Neural Network\nmodel_keras &lt;- keras_model_sequential()\n\nmodel_keras %&gt;% \n    # First hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\", \n        input_shape        = ncol(x_train_tbl)) %&gt;% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %&gt;%\n    # Second hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\") %&gt;% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %&gt;%\n    # Output layer\n    layer_dense(\n        units              = 1, \n        kernel_initializer = \"uniform\", \n        activation         = \"sigmoid\") %&gt;% \n    # Compile ANN\n    compile(\n        optimizer = 'adam',\n        loss      = 'binary_crossentropy',\n        metrics   = c('accuracy')\n    )\nmodel_keras\n\n#&gt; Model: \"sequential\"\n#&gt; ________________________________________________________________________________\n#&gt;  Layer (type)                       Output Shape                    Param #     \n#&gt; ================================================================================\n#&gt;  dense_2 (Dense)                    (None, 16)                      816         \n#&gt;  dropout_1 (Dropout)                (None, 16)                      0           \n#&gt;  dense_1 (Dense)                    (None, 16)                      272         \n#&gt;  dropout (Dropout)                  (None, 16)                      0           \n#&gt;  dense (Dense)                      (None, 1)                       17          \n#&gt; ================================================================================\n#&gt; Total params: 1,105\n#&gt; Trainable params: 1,105\n#&gt; Non-trainable params: 0\n#&gt; ________________________________________________________________________________\n\n\n\n# Fit the keras model to the training data\nfit_keras &lt;-  model_keras %&gt;% fit(\n    x               = as.matrix(x_train_tbl) , \n    y               = as.matrix(y_train_vec) , \n    epochs          = 35 ,\n    batch_size      = 50 , \n    validation_data = list(as.matrix(x_test_tbl), as.matrix(y_test_vec)) ,\n    validation_split= 0.3 \n    )\nfit_keras\n\n#&gt; \n#&gt; Final epoch (plot to see history):\n#&gt;         loss: 0.395\n#&gt;     accuracy: 0.8201\n#&gt;     val_loss: 0.4325\n#&gt; val_accuracy: 0.7846\n\n\n\n# Plot the training/validation history of our Keras model\nplot(fit_keras) +\n  labs(title = \"Deep Learning Training Results\") +\n  theme_minimal() +\n  theme(legend.position  = \"bottom\", \n        strip.placement  = \"inside\")\n\n\n\n\n\n\n\n\n# # Predicted Class\n# yhat_keras_class_vec &lt;- predict_classes(object = model_keras, x = as.matrix(x_test_tbl)) %&gt;%\n#     as.vector()\n# \n# # Predicted Class Probability\n# yhat_keras_prob_vec  &lt;- predict_proba(object = model_keras, x = as.matrix(x_test_tbl)) %&gt;%\n#     as.vector()\n\npredict_classes() and predict_proba() seem to be deprecated. As this Challenge is optional and the following steps seem to be a repetition of the last Chapter I decided to not continue further."
  },
  {
    "objectID": "content/01_journal/Challenge_2.html",
    "href": "content/01_journal/Challenge_2.html",
    "title": "Challenge 2: Regression",
    "section": "",
    "text": "1 Load packages:\n\n# Standard\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\n\n#&gt; \n#&gt; Attache Paket: 'recipes'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:stringr':\n#&gt; \n#&gt;     fixed\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:stats':\n#&gt; \n#&gt;     step\n\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n#&gt; \n#&gt; Attache Paket: 'yardstick'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:readr':\n#&gt; \n#&gt;     spec\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n#&gt; Lade nötiges Paket: rpart\n\nlibrary(workflows)\n\n\n2 Data preparation:\n\n# Modeling ----------------------------------------------------------------\nbike_features_tbl &lt;- readRDS(\"Data/bike_features_tbl.rds\")\n\nbike_features_tbl &lt;- bike_features_tbl %&gt;%\n  select(price, model, category_2, frame_material) \n\n\n3 Split data\n\n# run both following commands at the same time\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                                       strata = \"category_2\")\n\n# Assign training and test data\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj)\n\n# We have to remove spaces and dashes from the column names\ntrain_tbl &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\n\n4 Model\n\nmodel_reg_lm &lt;- linear_reg(mode = \"regression\") %&gt;% set_engine(\"lm\")\n\n\n5 Recipe\n\nrecipe_obj &lt;- recipe(price ~ ., data = bike_features_tbl) %&gt;% \n  update_role(model, new_role = \"ID\") %&gt;%\n  step_dummy(all_nominal(), -model, - all_outcomes(), one_hot = T) %&gt;%\n  prep()\n\n\n6 Workflow\n\nworkflow_obj &lt;- workflow() %&gt;% \n  add_model(model_reg_lm) %&gt;% \n  add_recipe(recipe_obj)\n\nfitted_workflow &lt;- fit(workflow_obj, train_tbl)\n\n\n7 Evaluate model with yardstick\n\ncalc_metrics &lt;- function(model, new_data = test_tbl) {\n\n    model %&gt;%\n        predict(new_data = new_data) %&gt;%\n\n        bind_cols(new_data %&gt;% select(price)) %&gt;%\n        yardstick::metrics(truth = price, estimate = .pred)\n\n}\n\nfitted_workflow %&gt;% calc_metrics(test_tbl)\n\n#&gt; Warning: There are new levels in a factor: E-Road"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is my lab jounal. For my results for the challenges click on “Jounal”."
  }
]