{
  "hash": "6fa7b408d282e6da1981cb484234aa5b",
  "result": {
    "markdown": "---\ntitle: \"Challenge 6: Deep Learning\"\nauthor: \"Andreas Jessen\"\n---\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-1_9f2c8ccaef75532a962fe09930d6c51d'}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\nlibrary(lime)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(corrr)\nlibrary(tensorflow)\nlibrary(keras)\n```\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-2_be767a21db446da645b0ce5d2d681de7'}\n\n```{.r .cell-code}\nchurn_data_raw <- read_csv(\"Data/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\n\nglimpse(churn_data_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 7,043\n#> Columns: 21\n#> $ customerID       <chr> \"7590-VHVEG\", \"5575-GNVDE\", \"3668-QPYBK\", \"7795-CFOCW…\n#> $ gender           <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Female\",…\n#> $ SeniorCitizen    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ Partner          <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n#> $ Dependents       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\"…\n#> $ tenure           <dbl> 1, 34, 2, 45, 2, 8, 22, 10, 28, 62, 13, 16, 58, 49, 2…\n#> $ PhoneService     <chr> \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n#> $ MultipleLines    <chr> \"No phone service\", \"No\", \"No\", \"No phone service\", \"…\n#> $ InternetService  <chr> \"DSL\", \"DSL\", \"DSL\", \"DSL\", \"Fiber optic\", \"Fiber opt…\n#> $ OnlineSecurity   <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"…\n#> $ OnlineBackup     <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"N…\n#> $ DeviceProtection <chr> \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"Y…\n#> $ TechSupport      <chr> \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n#> $ StreamingTV      <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Ye…\n#> $ StreamingMovies  <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"Yes…\n#> $ Contract         <chr> \"Month-to-month\", \"One year\", \"Month-to-month\", \"One …\n#> $ PaperlessBilling <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n#> $ PaymentMethod    <chr> \"Electronic check\", \"Mailed check\", \"Mailed check\", \"…\n#> $ MonthlyCharges   <dbl> 29.85, 56.95, 53.85, 42.30, 70.70, 99.65, 89.10, 29.7…\n#> $ TotalCharges     <dbl> 29.85, 1889.50, 108.15, 1840.75, 151.65, 820.50, 1949…\n#> $ Churn            <chr> \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Y…\n```\n:::\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-3_cbf009376001a34b263ed3b82db36360'}\n\n```{.r .cell-code}\nchurn_data_tbl <- churn_data_raw %>%\n                  select(-customerID) %>%\n                  drop_na(TotalCharges) %>%\n                  select(Churn, everything())\n```\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-4_1ef13613c6c2741ec2f637a014aa3e2d'}\n\n```{.r .cell-code}\n# Split test/training sets\nset.seed(100)\ntrain_test_split <- initial_split(churn_data_tbl, prop = 0.8)\ntrain_test_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> <Training/Testing/Total>\n#> <5625/1407/7032>\n```\n:::\n\n```{.r .cell-code}\n## <Analysis/Assess/Total>\n## <5626/1406/7032>\n\n# Retrieve train and test sets\ntrain_tbl <- training(train_test_split)\ntest_tbl  <- testing(train_test_split)\n```\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-5_88c37eb63ba1536cef4a5e81f9015142'}\n\n```{.r .cell-code}\n# Create recipe\nrec_obj <- recipe(Churn ~ ., data = train_tbl) %>%\n    step_rm(Churn) %>% \n    step_discretize(tenure, options = list(cuts = 6)) %>%\n    step_log(TotalCharges) %>%\n    step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%\n    step_center(all_predictors(), -all_outcomes()) %>%\n    step_scale(all_predictors(), -all_outcomes()) %>%\n    prep(data = train_tbl)\n```\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-6_94876b425c93efa89f4b67a9e9764900'}\n\n```{.r .cell-code}\n# Predictors\nx_train_tbl <- bake( rec_obj , new_data = train_tbl )\nx_test_tbl  <- bake( rec_obj , new_data = test_tbl )\n```\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-7_6db7a96a04e3dce577c8ff947271844e'}\n\n```{.r .cell-code}\n# Response variables for training and testing sets\ny_train_vec <- ifelse( train_tbl$Churn == \"Yes\", 1, 0 )\ny_test_vec  <- ifelse( test_tbl$Churn == \"Yes\", 1, 0 )\n```\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-8_1b7955056f6f65f41ba81779712073dd'}\n\n```{.r .cell-code}\n# Building our Artificial Neural Network\nmodel_keras <- keras_model_sequential()\n\nmodel_keras %>% \n    # First hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\", \n        input_shape        = ncol(x_train_tbl)) %>% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %>%\n    # Second hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\") %>% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %>%\n    # Output layer\n    layer_dense(\n        units              = 1, \n        kernel_initializer = \"uniform\", \n        activation         = \"sigmoid\") %>% \n    # Compile ANN\n    compile(\n        optimizer = 'adam',\n        loss      = 'binary_crossentropy',\n        metrics   = c('accuracy')\n    )\nmodel_keras\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Model: \"sequential\"\n#> ________________________________________________________________________________\n#>  Layer (type)                       Output Shape                    Param #     \n#> ================================================================================\n#>  dense_2 (Dense)                    (None, 16)                      816         \n#>  dropout_1 (Dropout)                (None, 16)                      0           \n#>  dense_1 (Dense)                    (None, 16)                      272         \n#>  dropout (Dropout)                  (None, 16)                      0           \n#>  dense (Dense)                      (None, 1)                       17          \n#> ================================================================================\n#> Total params: 1,105\n#> Trainable params: 1,105\n#> Non-trainable params: 0\n#> ________________________________________________________________________________\n```\n:::\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-9_51497bcd37f58e1fd4d4655e501b768a'}\n\n```{.r .cell-code}\n# Fit the keras model to the training data\nfit_keras <-  model_keras %>% fit(\n    x               = as.matrix(x_train_tbl) , \n    y               = as.matrix(y_train_vec) , \n    epochs          = 35 ,\n    batch_size      = 50 , \n    validation_data = list(as.matrix(x_test_tbl), as.matrix(y_test_vec)) ,\n    validation_split= 0.3 \n    )\nfit_keras\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> Final epoch (plot to see history):\n#>         loss: 0.395\n#>     accuracy: 0.8201\n#>     val_loss: 0.4325\n#> val_accuracy: 0.7846\n```\n:::\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-10_2b7e91a1088c25c9e28df8e0c8643834'}\n\n```{.r .cell-code}\n# Plot the training/validation history of our Keras model\nplot(fit_keras) +\n  labs(title = \"Deep Learning Training Results\") +\n  theme_minimal() +\n  theme(legend.position  = \"bottom\", \n        strip.placement  = \"inside\")\n```\n\n::: {.cell-output-display}\n![](Challenge_6_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Challenge_6_cache/html/unnamed-chunk-11_fe6f6df99d9e607d506308efd720f834'}\n\n```{.r .cell-code}\n# # Predicted Class\n# yhat_keras_class_vec <- predict_classes(object = model_keras, x = as.matrix(x_test_tbl)) %>%\n#     as.vector()\n# \n# # Predicted Class Probability\n# yhat_keras_prob_vec  <- predict_proba(object = model_keras, x = as.matrix(x_test_tbl)) %>%\n#     as.vector()\n```\n:::\n\n\n\npredict_classes() and predict_proba() seem to be deprecated. As this Challenge is optional and the following steps seem to be a repetition of the last Chapter I decided to not continue further.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}